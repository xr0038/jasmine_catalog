{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JASMINE Pilot Study Catalog JASMINE Pilot Study catalog contains infrared point sources around the Galactic center region. The catalog involves 2MASS Point Source Catalog, SIRIUS Galactic Center Catalog, and VVV DR2 Catalogue. How to access the database After the database is successfully built , you can start the database using docker-compose . Use -d option if you want to run the database as a background process. $ docker-compose up In default, the database uses the port 15432 (not 5432 ). Type the following command to access the database via the PostgreSQL command line interface. The password is the same as the username. $ psql -h localhost -p 15432 -d jasmine -U jasmine Here is a Python sample code to access the database. import psycopg2 as sql login = { 'host' : 'localhost' , 'port' : 15432 , 'database' : 'jasmine' , 'user' : 'jasmine' , 'password' : 'jasmine' , } with sql . connect ( ** login ) as connect : with connect . cursor () as cur : query = \"SELECT * FROM merged_sources LIMIT 10;\" cur . execute ( query ) for rec in cur : print ( rec ) # print each record as tuple How to use the database A main table ( merged_sources ) is defined as follows. See the overview page for detailed information and statistics of the merged catalog. CREATE TABLE merged_sources ( source_id BIGSERIAL PRIMARY KEY , tmass_source_id BIGINT , sirius_source_id BIGINT , vvv_source_id BIGINT , glon FLOAT , glat FLOAT , ra FLOAT , dec FLOAT , position_source VARCHAR ( 1 ), phot_hw_mag FLOAT , phot_hw_mag_error FLOAT , phot_hw_mag_source VARCHAR ( 1 ), phot_j_mag FLOAT , phot_j_mag_error FLOAT , phot_j_mag_source VARCHAR ( 1 ), phot_h_mag FLOAT , phot_h_mag_error FLOAT , phot_h_mag_source VARCHAR ( 1 ), phot_ks_mag FLOAT , phot_ks_mag_error FLOAT , phot_ks_mag_source VARCHAR ( 1 ) ); There are some sample queries. SELECT * FROM merged_sources WHERE ( glon BETWEEN - 0 . 1 AND 0 . 1 ) AND ( glat BETWEEN - 0 . 05 AND 0 . 05 ); q3c indeces are implemented. Sophisticated q3c search functions are available. Refer to the official q3c page for detailed usage of the q3c functions. SELECT * FROM merged_sources WHERE q3c_radial_query ( glon , glat , 0 . 0 , 0 . 0 , 0 . 1 ); The JASMINE field is defined as within_jasmine_field() . Sources within the latest JASMINE observation field are extracted using the following query. SELECT * FROM merged_sources WHERE within_jasmine_field ( glon , glat ); Overview of the JASMINE field.","title":"Top Page"},{"location":"#jasmine-pilot-study-catalog","text":"JASMINE Pilot Study catalog contains infrared point sources around the Galactic center region. The catalog involves 2MASS Point Source Catalog, SIRIUS Galactic Center Catalog, and VVV DR2 Catalogue.","title":"JASMINE Pilot Study Catalog"},{"location":"#how-to-access-the-database","text":"After the database is successfully built , you can start the database using docker-compose . Use -d option if you want to run the database as a background process. $ docker-compose up In default, the database uses the port 15432 (not 5432 ). Type the following command to access the database via the PostgreSQL command line interface. The password is the same as the username. $ psql -h localhost -p 15432 -d jasmine -U jasmine Here is a Python sample code to access the database. import psycopg2 as sql login = { 'host' : 'localhost' , 'port' : 15432 , 'database' : 'jasmine' , 'user' : 'jasmine' , 'password' : 'jasmine' , } with sql . connect ( ** login ) as connect : with connect . cursor () as cur : query = \"SELECT * FROM merged_sources LIMIT 10;\" cur . execute ( query ) for rec in cur : print ( rec ) # print each record as tuple","title":"How to access the database"},{"location":"#how-to-use-the-database","text":"A main table ( merged_sources ) is defined as follows. See the overview page for detailed information and statistics of the merged catalog. CREATE TABLE merged_sources ( source_id BIGSERIAL PRIMARY KEY , tmass_source_id BIGINT , sirius_source_id BIGINT , vvv_source_id BIGINT , glon FLOAT , glat FLOAT , ra FLOAT , dec FLOAT , position_source VARCHAR ( 1 ), phot_hw_mag FLOAT , phot_hw_mag_error FLOAT , phot_hw_mag_source VARCHAR ( 1 ), phot_j_mag FLOAT , phot_j_mag_error FLOAT , phot_j_mag_source VARCHAR ( 1 ), phot_h_mag FLOAT , phot_h_mag_error FLOAT , phot_h_mag_source VARCHAR ( 1 ), phot_ks_mag FLOAT , phot_ks_mag_error FLOAT , phot_ks_mag_source VARCHAR ( 1 ) ); There are some sample queries. SELECT * FROM merged_sources WHERE ( glon BETWEEN - 0 . 1 AND 0 . 1 ) AND ( glat BETWEEN - 0 . 05 AND 0 . 05 ); q3c indeces are implemented. Sophisticated q3c search functions are available. Refer to the official q3c page for detailed usage of the q3c functions. SELECT * FROM merged_sources WHERE q3c_radial_query ( glon , glat , 0 . 0 , 0 . 0 , 0 . 1 ); The JASMINE field is defined as within_jasmine_field() . Sources within the latest JASMINE observation field are extracted using the following query. SELECT * FROM merged_sources WHERE within_jasmine_field ( glon , glat ); Overview of the JASMINE field.","title":"How to use the database"},{"location":"build/","text":"Build Database Fetch the repository Clone the repository by typing the following line. Otherwise, you can download a zipped archive from the GitHub repository page. $ git clone https://github.com/JASMINE-Mission/pilot_catalog Install Docker Install Docker and docker-compose in your environment. Refer to the official page . Build PostgreSQL image Build a docker image for the database. Type the following command in the project root directory. A docker image of PostgreSQL-13 is fetched, and an empty database is build. $ make build-psql Then, launch a new terminal and start the PostgreSQL server. Type the following command in the project root directory. The configuration is written in docker-compose.yaml . When the SQL server starts without any troubles, you can access it at localhost:15432 . $ docker-compose up Set up the database By executing the following line, tables and functions are defined in the database. $ make initialize Catalog Create a directory data/catalog in the repository root. Then, download catalog files. Visit the catalog download page . 2MASS Download 2mass_psc_jasmine_field.csv from the catalog download page and store it in data/catalog/ . Use the following command to include the 2MASS catalog data into the database. $ psql -h localhost -p 15432 -d jasmine -U admin \\ -c \"COPY tmass_sources \\ (ra,dec,designation,\\ phot_j_mag,phot_j_cmsig,phot_j_mag_error,phot_j_snr,\\ phot_h_mag,phot_h_cmsig,phot_h_mag_error,phot_h_snr,\\ phot_ks_mag,phot_ks_cmsig,phot_ks_mag_error,phot_ks_snr,\\ quality_flag,contaminated,glon,glat,rd_flg,\\ color_j_h,color_h_ks,color_j_ks) \\ FROM '/data/catalog/2mass_psc_jasmine_field.csv' \\ DELIMITER',' CSV HEADER;\" How the CSV file is prepared is described in the 2MASS page . VVV Download vvv_348dr2_catalog.csv from the catalog download page and store it in data/catalog/ . Use the following command to include the VVV catalog data into the database. $ psql -h localhost -p 15432 -d jasmine -U admin \\ -c \"COPY vvv_sources \\ (source_id,glon,glat,ra,dec,\\ phot_z_flag,phot_z_mag,phot_z_mag_error,\\ phot_y_flag,phot_y_mag,phot_y_mag_error,\\ phot_j_flag,phot_j_mag,phot_j_mag_error,\\ phot_h_flag,phot_h_mag,phot_h_mag_error,\\ phot_ks_flag,phot_ks_mag,phot_ks_mag_error) \\ FROM '/data/catalog/vvv_348dr2_catalog.csv' \\ DELIMITER ',' CSV HEADER;\" How the CSV file is prepared is described in the VVV page . SIRIUS Download sirius_jasmine_field.csv from the catalog download page and store it in data/catalog/ . The SIRIUS catalog is password protedted. Please contact a member of the JASMINE project. Use the following command to include the SIRIUS catalog data into the database. $ psql -h localhost -p 15432 -d jasmine -U admin \\ -c \"COPY sirius_sources \\ (glon,glat,ra,dec,position_j_x,position_j_y,phot_j_mag,\\ phot_j_mag_error,position_h_x,position_h_y,phot_h_mag,\\ phot_h_mag_error,position_ks_x,position_ks_y,phot_ks_mag,\\ phot_ks_mag_error,plate_name) \\ FROM '/data/catalog/sirius_jasmine_field.csv' \\ DELIMITER ',' CSV HEADER;\" How the CSV file is prepared is described in the SIRIUS page . Gaia DR3 Download gaia_dr3_jasmine_field.csv from the catalog download page and store it in data/catalog/ . Use the following command to include the Gaia DR3 catalog data into the database. $ psql -h localhost -p 15432 -d jasmine -U admin \\ -c \"COPY gdr3_sources \\ (source_id,ra,dec,glon,glat,elon,elat,\\ parallax,parallax_error,ruwe,\\ pm,pmra,pmra_error,pmdec,pmdec_error,rv,rv_error,\\ phot_g_mag,phot_g_mag_error,\\ phot_bp_mag,phot_bp_mag_error,\\ phot_rp_mag,phot_rp_mag_error,\\ phot_variable_flag,non_single_star,\\ distance,distance_lower,distance_upper,\\ ag,ag_lower,ag_upper,a0,a0_lower,a0_upper) \\ FROM '/data/catalog/gaia_dr3_gccat.csv' \\ DELIMITER',' CSV HEADER;\" How the CSV file is prepared is described in [the Gaia DR3 page][gaia_dr3]. Compile Merged Catalog A merged catalog is compiled from the 2MASS, VVV, and SIRIUS catalogs. Type the following command. $ make merge The merged catalog contains sources from the three catalogs. Sources that seem identical (within 1.0\u2033, similar magnitudes) are marged into a single source in the merged catalog. The Hw magnitude is newly defined. Configure the database Type the following commands to set up indeces and a link table connecting the merged catalog and Gaia DR3 catalog. This process is a bit time-consuming. $ make index $ make link","title":"Build Database"},{"location":"build/#build-database","text":"","title":"Build Database"},{"location":"build/#fetch-the-repository","text":"Clone the repository by typing the following line. Otherwise, you can download a zipped archive from the GitHub repository page. $ git clone https://github.com/JASMINE-Mission/pilot_catalog","title":"Fetch the repository"},{"location":"build/#install-docker","text":"Install Docker and docker-compose in your environment. Refer to the official page .","title":"Install Docker"},{"location":"build/#build-postgresql-image","text":"Build a docker image for the database. Type the following command in the project root directory. A docker image of PostgreSQL-13 is fetched, and an empty database is build. $ make build-psql Then, launch a new terminal and start the PostgreSQL server. Type the following command in the project root directory. The configuration is written in docker-compose.yaml . When the SQL server starts without any troubles, you can access it at localhost:15432 . $ docker-compose up","title":"Build PostgreSQL image"},{"location":"build/#set-up-the-database","text":"By executing the following line, tables and functions are defined in the database. $ make initialize","title":"Set up the database"},{"location":"build/#catalog","text":"Create a directory data/catalog in the repository root. Then, download catalog files. Visit the catalog download page .","title":"Catalog"},{"location":"build/#compile-merged-catalog","text":"A merged catalog is compiled from the 2MASS, VVV, and SIRIUS catalogs. Type the following command. $ make merge The merged catalog contains sources from the three catalogs. Sources that seem identical (within 1.0\u2033, similar magnitudes) are marged into a single source in the merged catalog. The Hw magnitude is newly defined.","title":"Compile Merged Catalog"},{"location":"build/#configure-the-database","text":"Type the following commands to set up indeces and a link table connecting the merged catalog and Gaia DR3 catalog. This process is a bit time-consuming. $ make index $ make link","title":"Configure the database"},{"location":"download/","text":"Downloads","title":"Downloads"},{"location":"download/#downloads","text":"","title":"Downloads"},{"location":"overview/","text":"Catalog Overview Catalog Schema The structure of the merged catalog is as follows. The catalog contains the coordinates (Galactic and ICRS) and Hw -, J -, H -, and Ks -band magnitudes. Note that the Galactic Longitude is wrapped around 180\u00b0. Thus, the range of glon is (-180\u00b0, 180\u00b0). Indexes are created for all the coordinates and magnitudes. The arrangement of the records are optimized for searching by ( glon , glat ). Use q3c functions for efficient search by coordinates. CREATE TABLE merged_sources ( source_id BIGSERIAL PRIMARY KEY , --- unique source ID tmass_source_id BIGINT , --- source ID in 2MASS table sirius_source_id BIGINT , --- source ID in SIRIUS table vvv_source_id BIGINT , --- source ID in VIRAC table glon FLOAT , --- Galactic Longitude (deg) glat FLOAT , --- Galactic Latitude (deg) ra FLOAT , --- Right Ascension (deg) dec FLOAT , --- Declination (deg) position_source VARCHAR ( 1 ), --- position reference (V,S,2) phot_hw_mag FLOAT , --- Hw-band magnitude phot_hw_mag_error FLOAT , --- Hw-band magnitude error phot_hw_mag_source VARCHAR ( 1 ), --- Hw mag. reference (V,S,2) phot_j_mag FLOAT , --- J-band magnitude phot_j_mag_error FLOAT , --- J-band magnitude error phot_j_mag_source VARCHAR ( 1 ), --- J mag. reference (V,S,2) phot_h_mag FLOAT , --- H-band magnitude phot_h_mag_error FLOAT , --- H-band magnitude error phot_h_mag_source VARCHAR ( 1 ), --- H mag. reference (V,S,2) phot_ks_mag FLOAT , --- Ks-band magnitude phot_ks_mag_error FLOAT , --- Ks-band magnitude phot_ks_mag_source VARCHAR ( 1 ) --- Ks mag. reference (V,S,2) ); The link_gdr3 table is prepared for a cross match with the Gaia DR3 catalog. The structure of the table is as follows. Use this table as a link to retrieve the Gaia DR3 sources around sources in the merged catalog. CREATE TABLE link_gdr3 ( link_id BIGSERIAL PRIMARY KEY , --- unique link ID merged_source_id BIGINT NOT NULL , --- source ID in merged table gdr3_source_id BIGINT NOT NULL , --- source ID in Gaia DR3 table distance FLOAT NOT NULL --- distance in arcseconds ); Select sources from the merged catalog. Then, the selected sources are linked to objects in the Gaia DR3 catalog. The following query extracts the sources in the JASMINE field. The data of the Gaia DR3 catalog are attached if matched. SELECT m . * , e . * FROM ( SELECT * FROM merged_sources WHERE within_jasmine_field ( glon , glat ) ) as m LEFT JOIN link_gdr3 as l ON m . source_id = l . merged_source_id LEFT JOIN gdr3_sources as e ON l . gdr3_source_id = e . source_id ; The statistics of the sources in the JASMINE field The merged catalog contains 2789173 sources in the JASMINE field. The number of the photometric measurements in each band is listed in the following table. The Hw -band magnitudes are defined for about 43 % of the sources. The ratio is limited by the number of the objects with the J -band magnitudes. Band Number Ratio Hw -band 1224613 0.439 J -band 1286852 0.461 H -band 2363883 0.848 Ks -band 2692101 0.965 Total 2789173 \u2014 The histogram of the J -band magnitudes is described below. The profile suggests that the sources with \\(m_J < 17\\) are complete. However, the completeness limit should be investigated quantitatively. J-band histogram in Jasmine Field The histogram of the Hw -band magnitudes is illustrated. The completeness limit is possibly about 16.5 mag. Note that this limit should be evaluated in a proper way. Hw-band histogram in Jasmine Field The distribution of the sources brighter than 14.5 mag in the Hw -band is illustrated. The total number of the sources are 117230. The number is consistent with the original estimate of the JASMINE target sources. Distribution of the sources with Hw < 14.5 Merge procedure The three catalogs (2MASS, SIRIUS, and VIRAC) are compiled into the JASMINE merged catalog. The catalogs are sequentially merged. First, the 2MASS and SIRIUS catalogs are merged with a cross-match radius of 1.0\u2033. The SIRIUS coordinates get preference over the 2MASS coordinates. Magnitudes with smaller uncertainties are selected. Then, the temporary catalog is merged with VIRAC. The cross-match radius is 1.0\u2033. The VIRAC coordinates are adopted for matched sources. Magnitudes with smaller uncertainties are selected. Calculation of Hw magnitude JASMINE\u2019s Hw magnitude is calculated using J - and H -bands of each catalog. The conversion functions are adopted from Yano-san\u2019s presentation in ASJ meeting 2021 (PDF) . The Hw magnitudes for VIRAC are calculated with the VVV filter set as follows. \\[ H_W = 0.7988 J + 0.2012 H -0.0315 JH^2 \\quad \\sigma=0.033 \\] The Hw magnitudes for the SIRIUS catalog is described below. \\[ H_W = 0.7796 J + 0.2204 H -0.0326 JH^2 \\quad \\sigma=0.063 \\] The Hw magnitudes for the 2MASS point-source catalog is given below. \\[ H_W = 0.7829 J + 0.2171 H -0.0323 JH^2 \\quad \\sigma=0.035 \\] The merged catalog contains the Hw magnitude with the smallest uncertainty. Note that the Hw magnitude is not defined if either of the J - or H -band magnitudes is not defined.","title":"Overview"},{"location":"overview/#catalog-overview","text":"","title":"Catalog Overview"},{"location":"overview/#catalog-schema","text":"The structure of the merged catalog is as follows. The catalog contains the coordinates (Galactic and ICRS) and Hw -, J -, H -, and Ks -band magnitudes. Note that the Galactic Longitude is wrapped around 180\u00b0. Thus, the range of glon is (-180\u00b0, 180\u00b0). Indexes are created for all the coordinates and magnitudes. The arrangement of the records are optimized for searching by ( glon , glat ). Use q3c functions for efficient search by coordinates. CREATE TABLE merged_sources ( source_id BIGSERIAL PRIMARY KEY , --- unique source ID tmass_source_id BIGINT , --- source ID in 2MASS table sirius_source_id BIGINT , --- source ID in SIRIUS table vvv_source_id BIGINT , --- source ID in VIRAC table glon FLOAT , --- Galactic Longitude (deg) glat FLOAT , --- Galactic Latitude (deg) ra FLOAT , --- Right Ascension (deg) dec FLOAT , --- Declination (deg) position_source VARCHAR ( 1 ), --- position reference (V,S,2) phot_hw_mag FLOAT , --- Hw-band magnitude phot_hw_mag_error FLOAT , --- Hw-band magnitude error phot_hw_mag_source VARCHAR ( 1 ), --- Hw mag. reference (V,S,2) phot_j_mag FLOAT , --- J-band magnitude phot_j_mag_error FLOAT , --- J-band magnitude error phot_j_mag_source VARCHAR ( 1 ), --- J mag. reference (V,S,2) phot_h_mag FLOAT , --- H-band magnitude phot_h_mag_error FLOAT , --- H-band magnitude error phot_h_mag_source VARCHAR ( 1 ), --- H mag. reference (V,S,2) phot_ks_mag FLOAT , --- Ks-band magnitude phot_ks_mag_error FLOAT , --- Ks-band magnitude phot_ks_mag_source VARCHAR ( 1 ) --- Ks mag. reference (V,S,2) ); The link_gdr3 table is prepared for a cross match with the Gaia DR3 catalog. The structure of the table is as follows. Use this table as a link to retrieve the Gaia DR3 sources around sources in the merged catalog. CREATE TABLE link_gdr3 ( link_id BIGSERIAL PRIMARY KEY , --- unique link ID merged_source_id BIGINT NOT NULL , --- source ID in merged table gdr3_source_id BIGINT NOT NULL , --- source ID in Gaia DR3 table distance FLOAT NOT NULL --- distance in arcseconds ); Select sources from the merged catalog. Then, the selected sources are linked to objects in the Gaia DR3 catalog. The following query extracts the sources in the JASMINE field. The data of the Gaia DR3 catalog are attached if matched. SELECT m . * , e . * FROM ( SELECT * FROM merged_sources WHERE within_jasmine_field ( glon , glat ) ) as m LEFT JOIN link_gdr3 as l ON m . source_id = l . merged_source_id LEFT JOIN gdr3_sources as e ON l . gdr3_source_id = e . source_id ;","title":"Catalog Schema"},{"location":"overview/#merge-procedure","text":"The three catalogs (2MASS, SIRIUS, and VIRAC) are compiled into the JASMINE merged catalog. The catalogs are sequentially merged. First, the 2MASS and SIRIUS catalogs are merged with a cross-match radius of 1.0\u2033. The SIRIUS coordinates get preference over the 2MASS coordinates. Magnitudes with smaller uncertainties are selected. Then, the temporary catalog is merged with VIRAC. The cross-match radius is 1.0\u2033. The VIRAC coordinates are adopted for matched sources. Magnitudes with smaller uncertainties are selected.","title":"Merge procedure"},{"location":"source/2mass/","text":"2MASS Point-Source Catalog Schema CREATE TABLE IF NOT EXISTS tmass_sources ( source_id BIGSERIAL PRIMARY KEY , ra FLOAT NOT NULL , dec FLOAT NOT NULL , designation VARCHAR ( 32 ) NOT NULL , phot_j_mag FLOAT , phot_j_cmsig FLOAT , phot_j_mag_error FLOAT , phot_j_snr FLOAT , phot_h_mag FLOAT , phot_h_cmsig FLOAT , phot_h_mag_error FLOAT , phot_h_snr FLOAT , phot_ks_mag FLOAT , phot_ks_cmsig FLOAT , phot_ks_mag_error FLOAT , phot_ks_snr FLOAT , quality_flag VARCHAR ( 3 ) NOT NULL , contaminated INT NOT NULL , glon FLOAT NOT NULL , glat FLOAT NOT NULL , rd_flg VARCHAR ( 3 ) NOT NULL , color_j_h FLOAT , color_h_ks FLOAT , color_j_ks FLOAT ); Source 2mass Point-Source catalog 2MASS Point-Source catalog can be obtained from the Gator catalog query in IRSA . The extraction constrains are as follows: Galactic longitude between -2.5 and 1.2 degree. Galactic latitude between -1.2 and 1.2 degree. Not flagged as minor planets. mp_flg = 0 and glon >=- 2 . 5 and glon <= 1 . 2 and glat >=- 1 . 2 and glat <= 1 . 2 The original 2mass catalog is not compatible with the database, and the precisions of glon and glat records are not sufficient. Use convert_2mass.py to reformat the original CSV catalog. The usage of the convert_2mass.py is as follows. $ ./script/convert_2mass.py -h usage: convert_2mass.py [-h] [-f] src csv Reformat 2MASS catalog positional arguments: src input CSV catalog csv output CSV catalog optional arguments: -h, --help show this help message and exit -f, --overwrite overwrite if the output file exists. The following command reformats 2mass_gccat.csv . $ python script/convert_2mass.py 2mass_gccat.csv 2mass_psc_jasmine_field.csv The converted CSV file is hosted in the catalog download page .","title":"2MASS"},{"location":"source/2mass/#2mass-point-source-catalog","text":"","title":"2MASS Point-Source Catalog"},{"location":"source/2mass/#schema","text":"CREATE TABLE IF NOT EXISTS tmass_sources ( source_id BIGSERIAL PRIMARY KEY , ra FLOAT NOT NULL , dec FLOAT NOT NULL , designation VARCHAR ( 32 ) NOT NULL , phot_j_mag FLOAT , phot_j_cmsig FLOAT , phot_j_mag_error FLOAT , phot_j_snr FLOAT , phot_h_mag FLOAT , phot_h_cmsig FLOAT , phot_h_mag_error FLOAT , phot_h_snr FLOAT , phot_ks_mag FLOAT , phot_ks_cmsig FLOAT , phot_ks_mag_error FLOAT , phot_ks_snr FLOAT , quality_flag VARCHAR ( 3 ) NOT NULL , contaminated INT NOT NULL , glon FLOAT NOT NULL , glat FLOAT NOT NULL , rd_flg VARCHAR ( 3 ) NOT NULL , color_j_h FLOAT , color_h_ks FLOAT , color_j_ks FLOAT );","title":"Schema"},{"location":"source/2mass/#source","text":"","title":"Source"},{"location":"source/gaia_dr3/","text":"Gaia DR3 catalog Schema CREATE TABLE IF NOT EXISTS gdr3_sources ( source_id BIGINT PRIMARY KEY , ra FLOAT NOT NULL , dec FLOAT NOT NULL , glon FLOAT NOT NULL , glat FLOAT NOT NULL , elon FLOAT NOT NULL , elat FLOAT NOT NULL , parallax FLOAT , parallax_error FLOAT , ruwe FLOAT , pm FLOAT , pmra FLOAT , pmra_error FLOAT , pmdec FLOAT , pmdec_error FLOAT , rv FLOAT , rv_error FLOAT , phot_g_mag FLOAT , phot_g_mag_error FLOAT , phot_bp_mag FLOAT , phot_bp_mag_error FLOAT , phot_rp_mag FLOAT , phot_rp_mag_error FLOAT , phot_variable_flag VARCHAR ( 32 ), non_single_star INTEGER , distance FLOAT , distance_lower FLOAT , distance_upper FLOAT , ag FLOAT , ag_lower FLOAT , ag_upper FLOAT , a0 FLOAT , a0_lower FLOAT , a0_upper FLOAT ); Source The Gaia DR3 catalog is obtained from the Gaia Archive . The advanced query mode is used to extract the source around the Galactic center. The extraction constrains are as follows: Galactic longitude between -2.5 and 1.2 degree. Galactic latitude between -1.2 and 1.2 degree. The SQL query is described below. Note that the Galactic longitude is constraind between -180 and 180 degrees. SELECT source_id , ra , dec , l - 360 . 0 * floor ( l / 180 . 0 ) AS glon , b AS glat , ecl_lon , ecl_lat , parallax , parallax_error , ruwe , pm , pmra , pmra_error , pmdec , pmdec_error , radial_velocity , radial_velocity_error , phot_g_mean_mag AS phot_g_mag , 2 . 5 * log10 ( 1 + 1 . 0 / phot_g_mean_flux_over_error ) AS phot_g_mag_error , phot_bp_mean_mag AS phot_bp_mag , 2 . 5 * log10 ( 1 + 1 . 0 / phot_bp_mean_flux_over_error ) AS phot_bp_mag_error , phot_rp_mean_mag AS phot_rp_mag , 2 . 5 * log10 ( 1 + 1 . 0 / phot_rp_mean_flux_over_error ) AS phot_rp_mag_error , phot_variable_flag , non_single_star , distance_gspphot , distance_gspphot_lower , distance_gspphot_upper , ag_gspphot , ag_gspphot_lower , ag_gspphot_upper , azero_gspphot , azero_gspphot_lower , azero_gspphot_upper FROM gaiadr3 . gaia_source WHERE ( l <= 1 . 2 OR 360 - 2 . 5 <= l ) AND ( b BETWEEN - 1 . 2 AND 1 . 2 ); The converted CSV file is hosted in the catalog download page .","title":"Gaia EDR3"},{"location":"source/gaia_dr3/#gaia-dr3-catalog","text":"","title":"Gaia DR3 catalog"},{"location":"source/gaia_dr3/#schema","text":"CREATE TABLE IF NOT EXISTS gdr3_sources ( source_id BIGINT PRIMARY KEY , ra FLOAT NOT NULL , dec FLOAT NOT NULL , glon FLOAT NOT NULL , glat FLOAT NOT NULL , elon FLOAT NOT NULL , elat FLOAT NOT NULL , parallax FLOAT , parallax_error FLOAT , ruwe FLOAT , pm FLOAT , pmra FLOAT , pmra_error FLOAT , pmdec FLOAT , pmdec_error FLOAT , rv FLOAT , rv_error FLOAT , phot_g_mag FLOAT , phot_g_mag_error FLOAT , phot_bp_mag FLOAT , phot_bp_mag_error FLOAT , phot_rp_mag FLOAT , phot_rp_mag_error FLOAT , phot_variable_flag VARCHAR ( 32 ), non_single_star INTEGER , distance FLOAT , distance_lower FLOAT , distance_upper FLOAT , ag FLOAT , ag_lower FLOAT , ag_upper FLOAT , a0 FLOAT , a0_lower FLOAT , a0_upper FLOAT );","title":"Schema"},{"location":"source/gaia_dr3/#source","text":"The Gaia DR3 catalog is obtained from the Gaia Archive . The advanced query mode is used to extract the source around the Galactic center. The extraction constrains are as follows: Galactic longitude between -2.5 and 1.2 degree. Galactic latitude between -1.2 and 1.2 degree. The SQL query is described below. Note that the Galactic longitude is constraind between -180 and 180 degrees. SELECT source_id , ra , dec , l - 360 . 0 * floor ( l / 180 . 0 ) AS glon , b AS glat , ecl_lon , ecl_lat , parallax , parallax_error , ruwe , pm , pmra , pmra_error , pmdec , pmdec_error , radial_velocity , radial_velocity_error , phot_g_mean_mag AS phot_g_mag , 2 . 5 * log10 ( 1 + 1 . 0 / phot_g_mean_flux_over_error ) AS phot_g_mag_error , phot_bp_mean_mag AS phot_bp_mag , 2 . 5 * log10 ( 1 + 1 . 0 / phot_bp_mean_flux_over_error ) AS phot_bp_mag_error , phot_rp_mean_mag AS phot_rp_mag , 2 . 5 * log10 ( 1 + 1 . 0 / phot_rp_mean_flux_over_error ) AS phot_rp_mag_error , phot_variable_flag , non_single_star , distance_gspphot , distance_gspphot_lower , distance_gspphot_upper , ag_gspphot , ag_gspphot_lower , ag_gspphot_upper , azero_gspphot , azero_gspphot_lower , azero_gspphot_upper FROM gaiadr3 . gaia_source WHERE ( l <= 1 . 2 OR 360 - 2 . 5 <= l ) AND ( b BETWEEN - 1 . 2 AND 1 . 2 ); The converted CSV file is hosted in the catalog download page .","title":"Source"},{"location":"source/sirius/","text":"SIRIUS Galactic Center catalog Schema CREATE TABLE IF NOT EXISTS sirius_sources_orig ( source_id BIGSERIAL PRIMARY KEY , glon FLOAT NOT NULL , glat FLOAT NOT NULL , ra FLOAT NOT NULL , dec FLOAT NOT NULL , position_j_x FLOAT , position_j_y FLOAT , phot_j_mag FLOAT , phot_j_mag_error FLOAT , position_h_x FLOAT , position_h_y FLOAT , phot_h_mag FLOAT , phot_h_mag_error FLOAT , position_ks_x FLOAT , position_ks_y FLOAT , phot_ks_mag FLOAT , phot_ks_mag_error FLOAT , plate_name VARCHAR ( 16 ) NOT NULL ); DROP VIEW IF EXISTS sirius_sources CASCADE ; CREATE MATERIALIZED VIEW sirius_sources AS SELECT * FROM sirius_sources_orig WHERE ( glon BETWEEN - 2 . 5 AND 1 . 2 ) AND ( glat BETWEEN - 1 . 2 AND 1 . 2 ); Source SIRIUS Galactic Center catalog is obtained from private communication. The original catalog is given in a text table format. To import the catalog into the PostgreSQL database, the catalog is converted into the CSV format. A Python script convert_sirius.py is available to convert the SIRIUS catalog. The usage of the script is as follows. $ ./script/convert_sirius.py -h usage: convert_sirius.py [-h] [-f] src csv Reshape SIRIUS catalog to CSV format positional arguments: src input text catalog csv output CSV catalog file optional arguments: -h, --help show this help message and exit -f, --overwrite overwrite if the output file exists. The SIRIUS GC catalog contains about 12230000 objects. The conversion takes a good amount of time. I recommend to use screen for conversion. The following command launches a background screen environment that runs a job to convert the catalog. $ screen -dmS sirius \\ python script/convert_sirius.py sirius_WGCCatAll.dat sirius_jasmine_field.csv The converted CSV file is hosted in the catalog download page .","title":"SIRIUS"},{"location":"source/sirius/#sirius-galactic-center-catalog","text":"","title":"SIRIUS Galactic Center catalog"},{"location":"source/sirius/#schema","text":"CREATE TABLE IF NOT EXISTS sirius_sources_orig ( source_id BIGSERIAL PRIMARY KEY , glon FLOAT NOT NULL , glat FLOAT NOT NULL , ra FLOAT NOT NULL , dec FLOAT NOT NULL , position_j_x FLOAT , position_j_y FLOAT , phot_j_mag FLOAT , phot_j_mag_error FLOAT , position_h_x FLOAT , position_h_y FLOAT , phot_h_mag FLOAT , phot_h_mag_error FLOAT , position_ks_x FLOAT , position_ks_y FLOAT , phot_ks_mag FLOAT , phot_ks_mag_error FLOAT , plate_name VARCHAR ( 16 ) NOT NULL ); DROP VIEW IF EXISTS sirius_sources CASCADE ; CREATE MATERIALIZED VIEW sirius_sources AS SELECT * FROM sirius_sources_orig WHERE ( glon BETWEEN - 2 . 5 AND 1 . 2 ) AND ( glat BETWEEN - 1 . 2 AND 1 . 2 );","title":"Schema"},{"location":"source/sirius/#source","text":"SIRIUS Galactic Center catalog is obtained from private communication. The original catalog is given in a text table format. To import the catalog into the PostgreSQL database, the catalog is converted into the CSV format. A Python script convert_sirius.py is available to convert the SIRIUS catalog. The usage of the script is as follows. $ ./script/convert_sirius.py -h usage: convert_sirius.py [-h] [-f] src csv Reshape SIRIUS catalog to CSV format positional arguments: src input text catalog csv output CSV catalog file optional arguments: -h, --help show this help message and exit -f, --overwrite overwrite if the output file exists. The SIRIUS GC catalog contains about 12230000 objects. The conversion takes a good amount of time. I recommend to use screen for conversion. The following command launches a background screen environment that runs a job to convert the catalog. $ screen -dmS sirius \\ python script/convert_sirius.py sirius_WGCCatAll.dat sirius_jasmine_field.csv The converted CSV file is hosted in the catalog download page .","title":"Source"},{"location":"source/vvv_dr2/","text":"VVV catalogue DR2 Schema CRATE TABLE IF NOT EXISTS vvv_sources ( source_id BIGINT PRIMARY KEY , glon FLOAT NOT NULL , glat FLOAT NOT NULL , ra FLOAT NOT NULL , dec FLOAT NOT NULL , phot_z_flag INTEGER ( 4 ), phot_z_mag FLOAT , phot_z_mag_error FLOAT , phot_y_flag INTEGER ( 4 ), phot_y_mag FLOAT , phot_y_mag_error FLOAT , phot_j_flag INTEGER ( 4 ), phot_j_mag FLOAT , phot_j_mag_error FLOAT , phot_h_flag INTEGER ( 4 ), phot_h_mag FLOAT , phot_h_mag_error FLOAT , phot_ks_flag INTEGER ( 4 ), phot_ks_mag FLOAT , phot_ks_mag_error FLOAT ); Source Vizier SELECT srcid as source_id , GLON - 360 * FLOOR ( GLON / 180 . 0 ) as glon , GLAT as glat , RAJ2000 as ra , DEJ2000 as dec , Zperrbits as phot_z_flag , Zmag3 as phot_z_mag , e_Zmag3 as phot_z_mag_error , Yperrbits as phot_y_flag , Ymag3 as phot_y_mag , e_Ymag3 as phot_y_mag_error , Jperrbits as phot_j_flag , Jmag3 as phot_j_mag , e_Jmag3 as phot_j_mag_error , Hperrbits as phot_h_flag , Hmag3 as phot_h_mag , e_Hmag3 as phot_h_mag_error , Ksperrbits as phot_ks_flag , Ksmag3 as phot_ks_mag , e_Ksmag3 as phot_ks_mag_error FROM \"II/348/vvv2\" WHERE 1 = CONTAINS ( POINT ( 'FK5' , RAJ2000 , DEJ2000 ), POLYGON ( 'FK5' , 268 . 28239829 , - 28 . 5243427 , 265 . 95589414 , - 27 . 28605622 , 263 . 70668889 , - 30 . 41734933 , 266 . 07860638 , - 31 . 69475218 )) The converted CSV file is hosted in the catalog download page .","title":"VVV (DR2)"},{"location":"source/vvv_dr2/#vvv-catalogue-dr2","text":"","title":"VVV catalogue DR2"},{"location":"source/vvv_dr2/#schema","text":"CRATE TABLE IF NOT EXISTS vvv_sources ( source_id BIGINT PRIMARY KEY , glon FLOAT NOT NULL , glat FLOAT NOT NULL , ra FLOAT NOT NULL , dec FLOAT NOT NULL , phot_z_flag INTEGER ( 4 ), phot_z_mag FLOAT , phot_z_mag_error FLOAT , phot_y_flag INTEGER ( 4 ), phot_y_mag FLOAT , phot_y_mag_error FLOAT , phot_j_flag INTEGER ( 4 ), phot_j_mag FLOAT , phot_j_mag_error FLOAT , phot_h_flag INTEGER ( 4 ), phot_h_mag FLOAT , phot_h_mag_error FLOAT , phot_ks_flag INTEGER ( 4 ), phot_ks_mag FLOAT , phot_ks_mag_error FLOAT );","title":"Schema"},{"location":"source/vvv_dr2/#source","text":"Vizier SELECT srcid as source_id , GLON - 360 * FLOOR ( GLON / 180 . 0 ) as glon , GLAT as glat , RAJ2000 as ra , DEJ2000 as dec , Zperrbits as phot_z_flag , Zmag3 as phot_z_mag , e_Zmag3 as phot_z_mag_error , Yperrbits as phot_y_flag , Ymag3 as phot_y_mag , e_Ymag3 as phot_y_mag_error , Jperrbits as phot_j_flag , Jmag3 as phot_j_mag , e_Jmag3 as phot_j_mag_error , Hperrbits as phot_h_flag , Hmag3 as phot_h_mag , e_Hmag3 as phot_h_mag_error , Ksperrbits as phot_ks_flag , Ksmag3 as phot_ks_mag , e_Ksmag3 as phot_ks_mag_error FROM \"II/348/vvv2\" WHERE 1 = CONTAINS ( POINT ( 'FK5' , RAJ2000 , DEJ2000 ), POLYGON ( 'FK5' , 268 . 28239829 , - 28 . 5243427 , 265 . 95589414 , - 27 . 28605622 , 263 . 70668889 , - 30 . 41734933 , 266 . 07860638 , - 31 . 69475218 )) The converted CSV file is hosted in the catalog download page .","title":"Source"}]}